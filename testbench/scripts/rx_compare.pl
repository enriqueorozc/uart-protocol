#!/usr/bin/env perl

###############################################################################
## PROJECT: UART Communication System with Error Detection
###############################################################################
## FILENAME: rx_compare.pl
## AUTHOR: Enrique Orozco Jr. <enrique-orozco@outlook.com>
## DESCRIPTION: This script compares the ModelSim simulation output against
## the random data vectors generated by the generate_stimulus script to
## verify that the receiver is working properly.
###############################################################################

use strict;
use warnings;

use feature 'say';
use File::Path 'make_path';
use Data::Dumper;

# Check Output Directory + Destination File:
my $OUTPUT_DIR = "../outputs";
make_path($OUTPUT_DIR) unless -d $OUTPUT_DIR;
my $DEST_FILE = "../outputs/rx_simCompare.txt";

# Open the Destination File:
open(FHW, '>', $DEST_FILE);

# Open & Read the Stimulus File:
my $STIMULUS_FILE = "../outputs/stimulus.txt";
open(FH1, '<', $STIMULUS_FILE) or die 'stimulus.txt does not exist';

my @passed_values;
while ( <FH1> ) {
  push(@passed_values, $_);
}
chomp @passed_values;

# Open the Stimulation Output File:
my $SIMULATION_FILE = '../outputs/rx_simOutput.txt';
open(FH2, '<', $SIMULATION_FILE) or die 'rx_simOutput.txt does not exist';

my $count = 0;
while ( <FH2> ) {

  my @frame = split /-/, $_;
  chomp(@frame);

  # data-in | data-out | valid | STATUS
  my $passed = $passed_values[$count];
  my $received = $frame[0];
  my $valid_rx = ($frame[1] == '1') ? '1' : '0';

  my $correct = ($passed == $received && $frame[1]);

  print FHW "data-in: $passed | ";
  print FHW "data-out: $received | ";
  print FHW "valid_rx: $valid_rx | ";

  if ($correct) {
    say FHW "PASSED";
  } else {
    say FHW "FAILED";
  }

  $count++;
}

# Close Files:
close(FHW);
close(FH1);
close(FH2);